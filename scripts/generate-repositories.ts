import * as fs from 'fs';
import * as path from 'path';

const SCHEMA_DIR = './libs/dals/src/mongo/schema';
const REPOSITORY_DIR = './libs/dals/src/mongo/repositories';
const SKIP_FILES = ['base.schema.ts', 'index.ts'];
function toPascalCase(str: string): string {
  return str
    .split('-')
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join('');
}

function generateRepositories(): void {
  const schemaFiles = fs
    .readdirSync(SCHEMA_DIR)
    .filter((file) => file.endsWith('.schema.ts'))
    .filter((file) => !SKIP_FILES.includes(file));

  schemaFiles.forEach((file) => {
    const baseName = file.replace('.schema.ts', '');
    const importName = file.replace('.ts', '');
    const schemaName = toPascalCase(baseName);
    const tokenName = `${baseName.toUpperCase().replace(/-/g, '_')}_MODEL_TOKEN`;
    const repositoryName = `${schemaName}MRepository`;
    const modelVarName = `_${baseName.replace(/-/g, '')}Model`;

    const content = `// =============================================
// AUTO-GENERATED FILE - DO NOT EDIT!
// Generated by: generate-repositories.ts
// =============================================

import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';

import { BaseRepository } from '../base.repository';
import { SoftDeleteModel } from '../plugins/soft-delete';
import { ${tokenName}, ${schemaName} } from '../schema/${importName}';

@Injectable()
export class ${repositoryName} extends BaseRepository<${schemaName}> {
  constructor(@InjectModel(${tokenName}) protected readonly _model: SoftDeleteModel<${schemaName}>) {
    super(_model);
  }
}
`;

    fs.writeFileSync(path.join(REPOSITORY_DIR, `${baseName}.repository.ts`), content);
    console.log(`âœ… ${baseName}.repository.ts`);
  });

  const indexContent = `// =============================================
// AUTO-GENERATED FILE - DO NOT EDIT!
// Generated by: generate-repositories.ts
// =============================================

${schemaFiles
  .map((file) => {
    const baseName = file.replace('.schema.ts', '');
    return `export * from './${baseName}.repository';`;
  })
  .join('\n')}
`;

  fs.writeFileSync(path.join(REPOSITORY_DIR, 'index.ts'), indexContent);
  console.log('âœ… index.ts');

  const repoIndexContent = `// =============================================
// AUTO-GENERATED FILE - DO NOT EDIT!
// Generated by: generate-repositories.ts
// Date: ${new Date().toISOString()}
// =============================================

${schemaFiles
  .map((file) => {
    const baseName = file.replace('.schema.ts', '');
    const schemaName = toPascalCase(baseName);
    return `export { ${schemaName}MRepository } from './${baseName}.repository';`;
  })
  .join('\n')}
`;

  fs.writeFileSync(path.join(REPOSITORY_DIR, 'repositories.ts'), repoIndexContent);
  console.log('âœ… repositories.ts');

  console.log(`\nðŸŽ‰ Generated ${schemaFiles.length} repositories`);
}

if (!fs.existsSync(REPOSITORY_DIR)) {
  fs.mkdirSync(REPOSITORY_DIR, { recursive: true });
}

generateRepositories();
